{"ast":null,"code":"/**\r\n * import axios para fazer requests http (ligacao com back end)\r\n */\nimport axios from \"axios\";\n\n/**\r\n * Representa um algoritmo de encriptacao\r\n */\nvar md5 = require(\"md5\");\n\n/**\r\n * Esta interface representa a estrutura de um user\r\n */\n\n/**\r\n * usado para testar formato de email\r\n */\nconst Regex = RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n\n/**\r\n * Funcao que atulizada informacoes de um state isto é reprenseta o state\r\n * @param inParentComponent objeto que guarda state\r\n * @returns obejto state\r\n */\nexport function createState(inParentComponent) {\n  return {\n    /**\r\n     * variaveis com informacoes do state\r\n     */\n    currentView: \"login\",\n    name: null,\n    email: null,\n    password: null,\n    passwordConfirmation: null,\n    errName: null,\n    errEmail: null,\n    errPass: null,\n    errPassConfirmation: null,\n    listUsers: [],\n    uId: null,\n    fName: \"Chat\",\n    chat: false,\n    fId: null,\n    token: null,\n    listMessages: [],\n    listFriend: [],\n    message: null,\n    editMsg: false,\n    mId: null,\n    searchTerm: \"\",\n    /**\r\n     * serve para atualizar a componente neste caso irá para o \"RegisterView\" e dára update aos dados que esta necessita  \r\n     */\n    showRegisterView: function () {\n      this.setState({\n        currentView: \"register\",\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        passwordConfirmation: \"\",\n        errEmail: \"\",\n        errPass: \"\",\n        errName: \"\",\n        errPassConfirmation: \"\"\n      });\n    }.bind(inParentComponent),\n    /**\r\n    * serve para atualizar a componente neste caso irá para o \"LoginView\" e dára update aos dados que esta necessita  \r\n    */\n    showLoginView: function () {\n      this.setState({\n        currentView: \"login\",\n        email: \"\",\n        password: \"\",\n        token: \"\",\n        errEmail: \"\",\n        errPass: \"\"\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * serve para atualizar a componente neste caso irá para o \"HomeView\"\r\n     */\n    showHomeView: function () {\n      this.setState({\n        currentView: \"home\"\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * funcao recebe um evento criado pelo input que contem a passowrd e testa-a, dando update à variavel \"errPass\" do state\r\n     */\n    testPass: function (inEvent) {\n      this.setState({\n        password: inEvent.target.value\n      });\n      if (inEvent.target.value.length > 8) this.setState({\n        errPass: 'Password too long!'\n      });else this.setState({\n        errPass: ''\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * funcao recebe um evento criado pelo input que contem o email e testa-o, dando update à variavel \"errEmail\" do state\r\n     */\n    testEmail: function (inEvent) {\n      this.setState({\n        email: inEvent.target.value\n      });\n      // console.log(inEvent.target.value)\n      if (!Regex.test(inEvent.target.value)) this.setState({\n        errEmail: 'Email is not valid!'\n      });else this.setState({\n        errEmail: ''\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * funcao recebe um evento criado pelo input que contem o name e testa-o, dando update à variavel \"errName\" do state\r\n     */\n    testName: function (inEvent) {\n      this.setState({\n        name: inEvent.target.value\n      });\n      // console.log(inEvent.target.value)\n      if (!(inEvent.target.value.length > 1)) this.setState({\n        errName: 'Name too short!'\n      });else this.setState({\n        errName: ''\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * funcao recebe um evento criado pelo input que contem a passowrd de confirmacao e testa-a, dando update à variavel \"errPassConfirmation\" do state\r\n     */\n    testPassConfirmation: function (inEvent) {\n      this.setState({\n        passwordConfirmation: inEvent.target.value\n      });\n      // console.log(this.state)\n      if (this.state.password === inEvent.target.value) this.setState({\n        errPassConfirmation: ''\n      });else this.setState({\n        errPassConfirmation: 'Password are not equal'\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * funcao \"submit\" (login e register) recebe um evento, verifica variaveis \"err\" \r\n     * envia para axios dados necessarios para funcoes de back end e espera uma resposta depois atualizara variaveis do state\r\n     */\n    handleSubmit: function (event) {\n      event.preventDefault();\n      // console.log(event)\n      let validity = false;\n      if (this.state.currentView === \"login\") if (this.state.errEmail === \"\" && this.state.errPass === \"\") validity = true;\n      if (this.state.currentView === \"register\") if (this.state.errEmail === \"\" && this.state.errPass === \"\" && this.state.errName === \"\" && this.state.errPassConfirmation === \"\") validity = true;\n      if (this.state.currentView === \"login\") {\n        if (validity === true) {\n          let t = md5(this.state.password + Date.now());\n          const options = {\n            url: 'http://localhost:3000/api/login',\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json;charset=UTF-8',\n              'Authorization': t\n            },\n            data: {\n              email: this.state.email,\n              password: md5(this.state.password)\n            }\n          };\n          axios(options).then(async response => {\n            if (response.status === 200) {\n              this.setState({\n                currentView: \"home\",\n                uId: response.data.id,\n                name: response.data.name,\n                token: t,\n                fName: \"Chat\",\n                listMessages: [],\n                chat: false\n              });\n              await this.state.listFriends();\n            }\n          });\n        }\n      }\n      if (this.state.currentView === \"register\") {\n        if (validity === true) {\n          const options = {\n            url: 'http://localhost:3000/api/register',\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {\n              name: this.state.name,\n              email: this.state.email,\n              password: md5(this.state.password)\n            }\n          };\n          axios(options).then(response => {\n            if (response.status === 201) this.setState({\n              currentView: \"login\"\n            });\n            if (response.status === 400)\n              //errado\n              this.setState({\n                errEmail: \"Email exist\"\n              });\n          });\n        }\n      }\n    }.bind(inParentComponent),\n    /**\r\n     * funcao para adicionar amigo a lista de amigos, envia para axios dados necessarios atualizando as listas de amigos e usares depois (espera termino de cada processo, um de cada vez por ordem)\r\n     */\n    addFriends: async function (inEvent) {\n      var user = JSON.parse(inEvent.target.value);\n      const options = {\n        url: 'http://localhost:3000/api/addFriend',\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Authorization': this.state.token\n        },\n        data: {\n          fId: user.id,\n          fName: user.name\n        }\n      };\n      await axios(options);\n      await this.state.listFriends();\n      await this.state.searchUsers();\n    }.bind(inParentComponent),\n    /**\r\n     * funcao para remover amigo de lista de amigos, envia para axios dados necessarios atualizando variaveis e listas de amigos e usares depois (espera termino de cada processo, um de cada vez por ordem)\r\n     */\n    removeFriends: async function (inEvent) {\n      var friend = JSON.parse(inEvent.target.value);\n      const options = {\n        url: 'http://localhost:3000/api/removeFriend',\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Authorization': this.state.token\n        },\n        data: {\n          uId: this.state.uId,\n          fId: friend.fId,\n          fName: friend.name\n        }\n      };\n      await axios(options);\n      await this.setState({\n        listMessages: [],\n        fName: \"Chat\",\n        fId: null,\n        chat: false\n      });\n      await this.state.listFriends();\n      await this.state.searchUsers();\n    }.bind(inParentComponent),\n    /**\r\n     * funcao que atuliza variavel \"searchTerm\" e lista de users (espera termino de cada processo, um de cada vez por ordem)\r\n     */\n    updateSearchTerm: async function (inEvent) {\n      await this.setState({\n        searchTerm: inEvent.target.value\n      });\n      await this.state.searchUsers();\n    }.bind(inParentComponent),\n    /**\r\n     * funcao envia para axios dados necessarios este retorna uma response que vai atualizar a lista de users\r\n     */\n    searchUsers: async function () {\n      const options = {\n        url: 'http://localhost:3000/api/users',\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Authorization': this.state.token\n        },\n        data: {\n          name: this.state.searchTerm\n        }\n      };\n      axios(options).then(response => {\n        let users = [...response.data];\n        this.setState({\n          listUsers: users\n        });\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * funcao envia para axios dados necessarios este retorna uma response que vai atualizar a lista de amigos\r\n     */\n    listFriends: async function () {\n      const options = {\n        url: 'http://localhost:3000/api/friends',\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Authorization': this.state.token\n        }\n      };\n      axios(options).then(response => {\n        let users = [...response.data];\n        this.setState({\n          listFriend: users\n        });\n      });\n    }.bind(inParentComponent),\n    /**\r\n     * funcao que cria nova mensagem\r\n     * Envia para axios dados necessarios depois atualiza lista de mensagens (espera termino de cada processo, um de cada vez por ordem)\r\n     */\n    createMessage: async function (inEvent) {\n      // var msg: IMessage = JSON.parse(inEvent.target.value)\n      const options = {\n        url: 'http://localhost:3000/api/sendMessage',\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Authorization': this.state.token\n        },\n        data: {\n          toId: this.state.fId,\n          mText: this.state.message\n        }\n      };\n      await axios(options);\n      await this.state.getMessages(this.state.uId, this.state.fId);\n      this.setState({\n        message: \"\"\n      });\n    }.bind(inParentComponent),\n    setMessage: async function (inEvent) {\n      // var msg: IMessage = JSON.parse(inEvent.target.value)\n      // console.log(this.state.fId, this.state.uId, inEvent.target.value)\n      this.setState({\n        message: inEvent.target.value\n      });\n    }.bind(inParentComponent),\n    setFriend: async function (name, id) {\n      // var msg: IMessage = JSON.parse(inEvent.target.value)\n      this.setState({\n        fId: id,\n        fName: name,\n        chat: true\n      });\n      // console.log(this.state.fId)\n    }.bind(inParentComponent),\n    openChat: async function (fName, fId) {\n      await this.setState({\n        fName: fName,\n        fId: fId,\n        message: \"\",\n        chat: true\n      });\n      await this.state.getMessages();\n    }.bind(inParentComponent),\n    getMessages: async function () {\n      const options = {\n        url: 'http://localhost:3000/api/listMessage',\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Authorization': this.state.token\n        },\n        data: {\n          toId: this.state.fId\n        }\n      };\n      axios(options).then(response => {\n        let messages = [...response.data];\n        this.setState({\n          listMessages: messages\n        });\n      });\n    }.bind(inParentComponent),\n    editMessage: async function (mId, message) {\n      await this.setState({\n        editMsg: true,\n        mId: mId,\n        message: message\n      });\n      // console.log(this.state.mId, this.state.editMsg, this.state.message)\n    }.bind(inParentComponent),\n    updateMessage: async function (inEvent) {\n      const options = {\n        url: 'http://localhost:3000/api/editMessage',\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json;charset=UTF-8',\n          'Authorization': this.state.token\n        },\n        data: {\n          mText: this.state.message,\n          mId: this.state.mId\n        }\n      };\n      await axios(options);\n      await this.state.getMessages();\n      await this.setState({\n        editMsg: false,\n        mId: \"\",\n        message: \"\"\n      });\n    }.bind(inParentComponent)\n  };\n}\n;","map":{"version":3,"names":["axios","md5","require","Regex","RegExp","createState","inParentComponent","currentView","name","email","password","passwordConfirmation","errName","errEmail","errPass","errPassConfirmation","listUsers","uId","fName","chat","fId","token","listMessages","listFriend","message","editMsg","mId","searchTerm","showRegisterView","setState","bind","showLoginView","showHomeView","testPass","inEvent","target","value","length","testEmail","test","testName","testPassConfirmation","state","handleSubmit","event","preventDefault","validity","t","Date","now","options","url","method","headers","data","then","response","status","id","listFriends","addFriends","user","JSON","parse","searchUsers","removeFriends","friend","updateSearchTerm","users","createMessage","toId","mText","getMessages","setMessage","setFriend","openChat","messages","editMessage","updateMessage"],"sources":["C:/Users/Oliveira/Documents/GitHub/Messenger-App/Messenger Front-End/src/state.ts"],"sourcesContent":["/**\r\n * import axios para fazer requests http (ligacao com back end)\r\n */\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * Representa um algoritmo de encriptacao\r\n */\r\nvar md5 = require(\"md5\");\r\n\r\n/**\r\n * Esta interface representa a estrutura de um user\r\n */\r\nexport interface IUsers {\r\n  id: number,\r\n  name: string,\r\n}\r\n\r\n/**\r\n * Esta interface representa a estrutura de um friend \r\n */\r\nexport interface IFriends {\r\n  fId: number,\r\n  name: string,\r\n}\r\n\r\n/**\r\n * Esta interface representa a estrutura de um mensagem\r\n */\r\nexport interface IMessage {\r\n  toId: number,\r\n  fromId: number,\r\n  mText: string,\r\n}\r\n\r\n/**\r\n * usado para testar formato de email\r\n */\r\nconst Regex = RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n\r\n/**\r\n * Funcao que atulizada informacoes de um state isto é reprenseta o state\r\n * @param inParentComponent objeto que guarda state\r\n * @returns obejto state\r\n */\r\nexport function createState(inParentComponent: unknown) {\r\n\r\n  return {\r\n    /**\r\n     * variaveis com informacoes do state\r\n     */\r\n    currentView: \"login\",\r\n    name: null,\r\n    email: null,\r\n    password: null,\r\n    passwordConfirmation: null,\r\n    errName: null,\r\n    errEmail: null,\r\n    errPass: null,\r\n    errPassConfirmation: null,\r\n    listUsers: [],\r\n    uId: null,\r\n    fName: \"Chat\",\r\n    chat: false,\r\n    fId: null,\r\n    token: null,\r\n    listMessages: [],\r\n    listFriend: [],\r\n    message: null,\r\n    editMsg: false,\r\n    mId: null,\r\n    searchTerm: \"\",\r\n\r\n    /**\r\n     * serve para atualizar a componente neste caso irá para o \"RegisterView\" e dára update aos dados que esta necessita  \r\n     */\r\n    showRegisterView: function (): void {\r\n      this.setState({ currentView: \"register\", name: \"\", email: \"\", password: \"\", passwordConfirmation: \"\", errEmail: \"\", errPass: \"\", errName: \"\", errPassConfirmation: \"\" });\r\n\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n    * serve para atualizar a componente neste caso irá para o \"LoginView\" e dára update aos dados que esta necessita  \r\n    */\r\n    showLoginView: function (): void {\r\n      this.setState({ currentView: \"login\", email: \"\", password: \"\", token: \"\", errEmail: \"\", errPass: \"\" });\r\n\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * serve para atualizar a componente neste caso irá para o \"HomeView\"\r\n     */\r\n    showHomeView: function (): void {\r\n      this.setState({ currentView: \"home\" });\r\n\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao recebe um evento criado pelo input que contem a passowrd e testa-a, dando update à variavel \"errPass\" do state\r\n     */\r\n    testPass: function (inEvent: any): void {\r\n      this.setState({ password: inEvent.target.value });\r\n      if (inEvent.target.value.length > 8)\r\n        this.setState({ errPass: 'Password too long!' });\r\n      else\r\n        this.setState({ errPass: '' });\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao recebe um evento criado pelo input que contem o email e testa-o, dando update à variavel \"errEmail\" do state\r\n     */\r\n    testEmail: function (inEvent: any): void {\r\n      this.setState({ email: inEvent.target.value });\r\n      // console.log(inEvent.target.value)\r\n      if (!Regex.test(inEvent.target.value))\r\n        this.setState({ errEmail: 'Email is not valid!' });\r\n      else\r\n        this.setState({ errEmail: '' });\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao recebe um evento criado pelo input que contem o name e testa-o, dando update à variavel \"errName\" do state\r\n     */\r\n    testName: function (inEvent: any): void {\r\n      this.setState({ name: inEvent.target.value });\r\n      // console.log(inEvent.target.value)\r\n      if (!(inEvent.target.value.length > 1))\r\n        this.setState({ errName: 'Name too short!' });\r\n      else\r\n        this.setState({ errName: '' });\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao recebe um evento criado pelo input que contem a passowrd de confirmacao e testa-a, dando update à variavel \"errPassConfirmation\" do state\r\n     */\r\n    testPassConfirmation: function (inEvent: any): void {\r\n      this.setState({ passwordConfirmation: inEvent.target.value });\r\n      // console.log(this.state)\r\n      if (this.state.password === inEvent.target.value)\r\n        this.setState({ errPassConfirmation: '' });\r\n      else\r\n        this.setState({ errPassConfirmation: 'Password are not equal' });\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao \"submit\" (login e register) recebe um evento, verifica variaveis \"err\" \r\n     * envia para axios dados necessarios para funcoes de back end e espera uma resposta depois atualizara variaveis do state\r\n     */\r\n    handleSubmit: function (event: any): void {\r\n      event.preventDefault();\r\n      // console.log(event)\r\n      let validity = false;\r\n      if (this.state.currentView === \"login\")\r\n        if (this.state.errEmail === \"\" && this.state.errPass === \"\")\r\n          validity = true;\r\n      if (this.state.currentView === \"register\")\r\n        if (this.state.errEmail === \"\" && this.state.errPass === \"\" && this.state.errName === \"\" && this.state.errPassConfirmation === \"\")\r\n          validity = true;\r\n\r\n      if (this.state.currentView === \"login\") {\r\n        if (validity === true) {\r\n          let t = md5(this.state.password + Date.now())\r\n          const options = {\r\n            url: 'http://localhost:3000/api/login',\r\n            method: 'POST',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json;charset=UTF-8',\r\n              'Authorization': t\r\n            },\r\n            data: {\r\n              email: this.state.email,\r\n              password: md5(this.state.password),\r\n            }\r\n          };\r\n          axios(options).then(async response => {\r\n            if (response.status === 200) {\r\n              this.setState({ currentView: \"home\", uId: response.data.id, name: response.data.name, token: t, fName: \"Chat\", listMessages: [], chat: false });\r\n              await this.state.listFriends()\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (this.state.currentView === \"register\") {\r\n        if (validity === true) {\r\n          const options = {\r\n            url: 'http://localhost:3000/api/register',\r\n            method: 'POST',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json;charset=UTF-8'\r\n            },\r\n            data: {\r\n              name: this.state.name,\r\n              email: this.state.email,\r\n              password: md5(this.state.password),\r\n            }\r\n          };\r\n          axios(options).then(response => {\r\n            if (response.status === 201)\r\n              this.setState({ currentView: \"login\" });\r\n            if (response.status === 400) //errado\r\n              this.setState({ errEmail: \"Email exist\" });\r\n          });\r\n        }\r\n      }\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao para adicionar amigo a lista de amigos, envia para axios dados necessarios atualizando as listas de amigos e usares depois (espera termino de cada processo, um de cada vez por ordem)\r\n     */\r\n    addFriends: async function (inEvent: any): Promise<void> {\r\n      var user: IUsers = JSON.parse(inEvent.target.value)\r\n      const options = {\r\n        url: 'http://localhost:3000/api/addFriend',\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          'Authorization': this.state.token\r\n        },\r\n        data: {\r\n          fId: user.id,\r\n          fName: user.name,\r\n        }\r\n      };\r\n      await axios(options);\r\n      await this.state.listFriends()\r\n      await this.state.searchUsers()\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao para remover amigo de lista de amigos, envia para axios dados necessarios atualizando variaveis e listas de amigos e usares depois (espera termino de cada processo, um de cada vez por ordem)\r\n     */\r\n    removeFriends: async function (inEvent: any): Promise<void> {\r\n      var friend: IFriends = JSON.parse(inEvent.target.value)\r\n      const options = {\r\n        url: 'http://localhost:3000/api/removeFriend',\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          'Authorization': this.state.token\r\n        },\r\n        data: {\r\n          uId: this.state.uId,\r\n          fId: friend.fId,\r\n          fName: friend.name\r\n        }\r\n      };\r\n      await axios(options);\r\n      await this.setState({ listMessages: [], fName: \"Chat\", fId: null, chat: false })\r\n      await this.state.listFriends()\r\n      await this.state.searchUsers()\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao que atuliza variavel \"searchTerm\" e lista de users (espera termino de cada processo, um de cada vez por ordem)\r\n     */\r\n    updateSearchTerm: async function (inEvent: any): Promise<void> {\r\n      await this.setState({ searchTerm: inEvent.target.value })\r\n      await this.state.searchUsers()\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao envia para axios dados necessarios este retorna uma response que vai atualizar a lista de users\r\n     */\r\n    searchUsers: async function (): Promise<void> {\r\n      const options = {\r\n        url: 'http://localhost:3000/api/users',\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          'Authorization': this.state.token\r\n        },\r\n        data: {\r\n          name: this.state.searchTerm\r\n        }\r\n      };\r\n      axios<IUsers[]>(options).then(response => {\r\n        let users = [...response.data]\r\n        this.setState({ listUsers: users })\r\n      });\r\n\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao envia para axios dados necessarios este retorna uma response que vai atualizar a lista de amigos\r\n     */\r\n    listFriends: async function () {\r\n      const options = {\r\n        url: 'http://localhost:3000/api/friends',\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          'Authorization': this.state.token\r\n        }\r\n      };\r\n      axios<IFriends[]>(options).then(response => {\r\n        let users = [...response.data]\r\n        this.setState({ listFriend: users })\r\n      });\r\n    }.bind(inParentComponent),\r\n\r\n    /**\r\n     * funcao que cria nova mensagem\r\n     * Envia para axios dados necessarios depois atualiza lista de mensagens (espera termino de cada processo, um de cada vez por ordem)\r\n     */\r\n    createMessage: async function (inEvent: any): Promise<void> {\r\n      // var msg: IMessage = JSON.parse(inEvent.target.value)\r\n      const options = {\r\n        url: 'http://localhost:3000/api/sendMessage',\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          'Authorization': this.state.token\r\n        },\r\n        data: {\r\n          toId: this.state.fId,\r\n          mText: this.state.message\r\n        }\r\n      };\r\n      await axios(options);\r\n      await this.state.getMessages(this.state.uId, this.state.fId)\r\n      this.setState({ message: \"\" })\r\n    }.bind(inParentComponent),\r\n\r\n    setMessage: async function (inEvent: any): Promise<void> {\r\n      // var msg: IMessage = JSON.parse(inEvent.target.value)\r\n      // console.log(this.state.fId, this.state.uId, inEvent.target.value)\r\n      this.setState({ message: inEvent.target.value })\r\n    }.bind(inParentComponent),\r\n\r\n\r\n    setFriend: async function (name: string, id: number): Promise<void> {\r\n      // var msg: IMessage = JSON.parse(inEvent.target.value)\r\n      this.setState({ fId: id, fName: name, chat: true })\r\n      // console.log(this.state.fId)\r\n    }.bind(inParentComponent),\r\n\r\n    openChat: async function (fName: string, fId: number): Promise<void> {\r\n      await this.setState({ fName: fName, fId: fId, message: \"\", chat: true })\r\n      await this.state.getMessages()\r\n    }.bind(inParentComponent),\r\n\r\n    getMessages: async function (): Promise<void> {\r\n      const options = {\r\n        url: 'http://localhost:3000/api/listMessage',\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          'Authorization': this.state.token\r\n        },\r\n        data: {\r\n          toId: this.state.fId\r\n        }\r\n      }\r\n\r\n      axios<IMessage[]>(options).then(response => {\r\n        let messages = [...response.data]\r\n        this.setState({ listMessages: messages })\r\n      });\r\n\r\n    }.bind(inParentComponent),\r\n\r\n    editMessage: async function (mId: number, message: string): Promise<void> {\r\n      await this.setState({ editMsg: true, mId: mId, message: message })\r\n      // console.log(this.state.mId, this.state.editMsg, this.state.message)\r\n    }.bind(inParentComponent),\r\n\r\n    updateMessage: async function (inEvent: any): Promise<void> {\r\n      const options = {\r\n        url: 'http://localhost:3000/api/editMessage',\r\n        method: 'PUT',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json;charset=UTF-8',\r\n          'Authorization': this.state.token\r\n        },\r\n        data: {\r\n          mText: this.state.message,\r\n          mId: this.state.mId,\r\n        }\r\n      };\r\n      await axios(options);\r\n      await this.state.getMessages()\r\n      await this.setState({ editMsg: false, mId: \"\", message: \"\" })\r\n    }.bind(inParentComponent),\r\n\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}